assert_spec linux

create_boot_directory

proc cbe_image_file { } {
	return "vfs_cbe_block.img"
}

set use_interactively [expr ![get_cmd_switch --autopilot]]
set use_block 0

import_from_depot [depot_user]/src/[base_src] \
                  [depot_user]/pkg/[drivers_interactive_pkg] \
                  [depot_user]/pkg/terminal \
                  [depot_user]/src/init \
                  [depot_user]/src/posix \
                  [depot_user]/src/ncurses \
                  [depot_user]/src/bash \
                  [depot_user]/src/coreutils \
                  [depot_user]/src/vfs \
                  [depot_user]/src/vfs_pipe \
                  [depot_user]/src/fs_rom \
                  [depot_user]/src/report_rom \
                  [depot_user]/src/log_terminal

build {
	server/lx_block
	server/lx_fs
	lib/vfs/cbe
	test/vfs_stress
	test/libc
}

set config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>

	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>

	<default caps="100"/>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>

	<start name="drivers" caps="1000">
		<resource name="RAM" quantum="32M" constrain_phys="yes"/>
		<binary name="init"/>
		<route>
			<service name="ROM" label="config"> <parent label="drivers.config"/> </service>
			<service name="Timer"> <child name="timer"/> </service>
			<any-service> <parent/> </any-service>
		</route>
		<provides>
			<service name="Input"/> <service name="Framebuffer"/>
		</provides>
	</start>}

append_if $use_interactively config {
	<start name="terminal" caps="110">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Terminal"/></provides>
		<route>
			<service name="ROM" label="config"> <parent label="terminal.config"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>}

append_if [expr !$use_interactively] config {
	<start name="log_terminal" caps="110">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Terminal"/></provides>
		<route>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>}

append_if $use_block config {
	<start name="block_device" ld="no">
		<binary name="lx_block"/>
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="Block"/> </provides>
		<config file="} [cbe_image_file] {" block_size="4K" writeable="yes"/>
	</start>}

append_if [expr !$use_block] config {
	<start name="lx_fs" ld="no">
		<resource name="RAM" quantum="4M"/>
		<provides> <service name="File_system"/> </provides>
		<config>
			<default-policy root="/" writeable="yes"/>
		</config>
	</start>}

append config {

	<start name="vfs" caps="120">
		<resource name="RAM" quantum="30M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<vfs>}

append_if $use_block config {
				<block name="block" label="block_backend"/>}
append_if [expr !$use_block] config {
				<fs buffer_size="1M" label="fs_backend"/>}

append config {
				<tar name="coreutils.tar" />
				<tar name="bash.tar" />

				<dir name="home"> <ram/> </dir>
				<dir name="share"> </dir>
				<dir name="tmp"> <ram/> </dir>
				<dir name="dev">
					<zero/> <null/> <terminal/>
					<dir name="pipe"> <pipe/> </dir>
					<inline name="rtc">2018-01-01 00:01</inline>}

append_if $use_block config {
					<cbe name="cbe" show_progress="no" block="/block"/>}

append_if [expr !$use_block] config "<cbe name=\"cbe\" show_progress=\"no\" block=\"/[cbe_image_file]\"/>"

append config {
				</dir>
			</vfs>

			<policy label_prefix="vfs_rom" root="/"/>
			<default-policy root="/" writeable="yes"/>
		</config>
		<route>
			<service name="File_system" label="fs_backend"> <child name="lx_fs"/> </service>}

append_if $use_interactively config {
			<service name="Terminal"> <child name="terminal"/> </service>}

append_if [expr !$use_interactively] config {
			<service name="Terminal"> <child name="log_terminal"/> </service>}

append config {
			<service name="Timer"> <child name="timer"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="vfs_rom">
		<resource name="RAM" quantum="30M"/>
		<binary name="fs_rom"/>
		<provides> <service name="ROM"/> </provides>
		<config/>
		<route>
			<service name="File_system"> <child name="vfs"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="/bin/bash" caps="1000">
		<resource name="RAM" quantum="30M" />
		<config ld_verbose="yes">
			<libc stdin="/dev/terminal" stdout="/dev/terminal"
			      stderr="/dev/terminal" rtc="/dev/rtc" pipe="/dev/pipe"/>
			<vfs>
				<fs/>
				<rom name=".bashrc" label="cbe_vfs_snaps.sh"/>
			</vfs>
			<arg value="bash"/>
			<env key="TERM" value="screen"/>
			<env key="HOME" value="/"/>
			<env key="PATH" value="/bin" />
		</config>
		<route>
			<service name="File_system"> <child name="vfs"/> </service>
			<service name="ROM" label_suffix=".lib.so"> <parent/> </service>
			<service name="ROM" label_last="/bin/bash"> <child name="vfs_rom"/> </service>
			<service name="ROM" label_prefix="/bin"> <child name="vfs_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

</config>}

install_config $config

set shell_script "run/cbe_vfs_snaps.sh"
set repo "[repository_contains $shell_script]"
exec cp $repo/$shell_script bin/

append boot_modules {
	lx_block lx_fs
	spark.lib.so libsparkcrypto.lib.so vfs_cbe.lib.so
	cbe_vfs_snaps.sh

	vfs.lib.so libc.lib.so
}

append boot_modules [cbe_image_file]

build_boot_image $boot_modules

if {$use_interactively} {
	run_genode_until forever
} else {
	run_genode_until {.*--- Automated CBE testing finished.*} 60
}
