--
--  Copyright (C) 2019 Genode Labs GmbH, Componolit GmbH, secunet AG
--
--  This file is part of the Consistent Block Encrypter project, which is
--  distributed under the terms of the GNU Affero General Public License
--  version 3.
--

pragma Ada_2012;

with CBE.Primitive;

package body CBE.Check_Library
with SPARK_Mode
is
   procedure Initialize_Object (Obj : out Object_Type)
   is
   begin
      Superblock_Check.Initialize_Object (Obj.SB_Chk);
      VBD_Check.Initialize_Object (Obj.VBD_Chk);
      Free_Tree_Check.Initialize_Object (Obj.FT_Chk);
      Obj.Blk_IO := Block_IO.Initialized_Object;
      Obj.Client_Req := Request.Invalid_Object;
      Obj.Client_Req_Complete := False;
      Obj.Execute_Progress := False;
   end Initialize_Object;

   function Client_Request_Acceptable (Obj : Object_Type)
   return Boolean
   is (Superblock_Check.Primitive_Acceptable (Obj.SB_Chk));

   procedure Submit_Client_Request (
      Obj : in out Object_Type;
      Req :        Request.Object_Type)
   is
   begin
      Superblock_Check.Submit_Primitive (
         Obj.SB_Chk,
         Primitive.Valid_Object_No_Pool_Idx (
            Read, False, Primitive.Tag_Lib_SB_Check, 0, 0));

      Obj.Client_Req := Req;

   end Submit_Client_Request;

   function Peek_Completed_Client_Request (Obj : Object_Type)
   return Request.Object_Type
   is
   begin
      if not Obj.Client_Req_Complete then
         return Request.Invalid_Object;
      end if;
      return Obj.Client_Req;
   end Peek_Completed_Client_Request;

   procedure Drop_Completed_Client_Request (
      Obj : in out Object_Type;
      Req :        Request.Object_Type)
   is
   begin
      if not Request.Equal (Obj.Client_Req, Req) or else
         not Obj.Client_Req_Complete
      then
         raise Program_Error;
      end if;
      Obj.Client_Req := Request.Invalid_Object;
      Obj.Client_Req_Complete := False;
   end Drop_Completed_Client_Request;

   procedure Execute_Superblock_Check (Obj : in out Object_Type)
   is
   begin

      --
      --  Poke state machine of superblock initialization
      --
      Superblock_Check.Execute (Obj.SB_Chk);
      if Superblock_Check.Execute_Progress (Obj.SB_Chk) then
         Obj.Execute_Progress := True;
      end if;

      --
      --  Handle primitives generated by superblock initialization
      --
      Loop_SB_Check_Generated_Prims :
      loop
         Declare_SB_Check_Generated_Prim :
         declare
            Prim : constant Primitive.Object_Type :=
               Superblock_Check.Peek_Generated_Primitive (
                  Obj.SB_Chk);
         begin
            exit Loop_SB_Check_Generated_Prims when
               not Primitive.Valid (Prim);

            if Primitive.Has_Tag_SB_Check_Blk_IO (Prim) then

               exit Loop_SB_Check_Generated_Prims when
                  not Block_IO.Primitive_Acceptable (Obj.Blk_IO);

               Block_IO.Submit_Primitive (
                  Obj.Blk_IO, Primitive.Tag_SB_Check_Blk_IO, Prim);

               Superblock_Check.Drop_Generated_Primitive (
                  Obj.SB_Chk, Prim);

               Obj.Execute_Progress := True;

            elsif Primitive.Has_Tag_SB_Check_VBD_Check (Prim) then

               if VBD_Check.Primitive_Acceptable (Obj.VBD_Chk) then

                  VBD_Check.Submit_Primitive (
                     Obj.VBD_Chk, Prim,
                     Superblock_Check.Peek_Generated_Max_Lvl_Idx (
                        Obj.SB_Chk, Prim),
                     Superblock_Check.Peek_Generated_Max_Child_Idx (
                        Obj.SB_Chk, Prim),
                     Superblock_Check.Peek_Generated_Nr_Of_Leafs (
                        Obj.SB_Chk, Prim),
                     Superblock_Check.Peek_Generated_Root (
                        Obj.SB_Chk, Prim));

                  Superblock_Check.Drop_Generated_Primitive (
                     Obj.SB_Chk, Prim);

                  Obj.Execute_Progress := True;

               end if;

            elsif Primitive.Has_Tag_SB_Check_FT_Check (Prim) then

               if Free_Tree_Check.Primitive_Acceptable (Obj.FT_Chk) then

                  Free_Tree_Check.Submit_Primitive (
                     Obj.FT_Chk, Prim,
                     Superblock_Check.Peek_Generated_Max_Lvl_Idx (
                        Obj.SB_Chk, Prim),
                     Superblock_Check.Peek_Generated_Max_Child_Idx (
                        Obj.SB_Chk, Prim),
                     Superblock_Check.Peek_Generated_Nr_Of_Leafs (
                        Obj.SB_Chk, Prim),
                     Superblock_Check.Peek_Generated_Root (
                        Obj.SB_Chk, Prim));

                  Superblock_Check.Drop_Generated_Primitive (
                     Obj.SB_Chk, Prim);

                  Obj.Execute_Progress := True;

               end if;

            elsif Primitive.Has_Tag_SB_Check_MT_Check (Prim) then

               if Free_Tree_Check.Primitive_Acceptable (Obj.FT_Chk) then

                  Free_Tree_Check.Submit_Primitive (
                     Obj.FT_Chk, Prim,
                     Superblock_Check.Peek_Generated_Max_Lvl_Idx (
                        Obj.SB_Chk, Prim),
                     Superblock_Check.Peek_Generated_Max_Child_Idx (
                        Obj.SB_Chk, Prim),
                     Superblock_Check.Peek_Generated_Nr_Of_Leafs (
                        Obj.SB_Chk, Prim),
                     Superblock_Check.Peek_Generated_Root (
                        Obj.SB_Chk, Prim));

                  Superblock_Check.Drop_Generated_Primitive (
                     Obj.SB_Chk, Prim);

                  Obj.Execute_Progress := True;

               end if;

            else
               raise Program_Error;
            end if;

         end Declare_SB_Check_Generated_Prim;

      end loop Loop_SB_Check_Generated_Prims;

      if Primitive.Equal (
            Primitive.Valid_Object_No_Pool_Idx (
               Read, False, Primitive.Tag_Lib_SB_Check, 0, 0),
            Superblock_Check.Peek_Completed_Primitive (Obj.SB_Chk))
      then
         Request.Success (Obj.Client_Req, True);
         Obj.Client_Req_Complete := True;
         Superblock_Check.Drop_Completed_Primitive (
            Obj.SB_Chk,
            Primitive.Valid_Object_No_Pool_Idx (
               Read, False, Primitive.Tag_Lib_SB_Check, 0, 0));
      end if;

   end Execute_Superblock_Check;

   procedure Execute_VBD_Check (Obj : in out Object_Type)
   is
   begin

      --
      --  Poke state machine of VBD initialization
      --
      VBD_Check.Execute (Obj.VBD_Chk);
      if VBD_Check.Execute_Progress (Obj.VBD_Chk) then
         Obj.Execute_Progress := True;
      end if;

      --
      --  Handle primitives generated by VBD initialization
      --
      Loop_VBD_Check_Generated_Prims :
      loop
         Declare_VBD_Check_Generated_Prim :
         declare
            Prim : constant Primitive.Object_Type :=
               VBD_Check.Peek_Generated_Primitive (
                  Obj.VBD_Chk);
         begin
            exit Loop_VBD_Check_Generated_Prims when
               not Primitive.Valid (Prim);

            if Primitive.Has_Tag_VBD_Check_Blk_IO (Prim) then

               exit Loop_VBD_Check_Generated_Prims when
                  not Block_IO.Primitive_Acceptable (Obj.Blk_IO);

               Block_IO.Submit_Primitive (
                  Obj.Blk_IO, Primitive.Tag_VBD_Check_Blk_IO, Prim);

               Obj.Execute_Progress := True;
            else
               raise Program_Error;
            end if;

            VBD_Check.Drop_Generated_Primitive (Obj.VBD_Chk, Prim);

         end Declare_VBD_Check_Generated_Prim;

      end loop Loop_VBD_Check_Generated_Prims;

      --
      --  Handle primitives completed by VBD initialization
      --
      Loop_VBD_Check_Completed_Prims :
      loop
         Declare_VBD_Check_Completed_Prim :
         declare
            Prim : constant Primitive.Object_Type :=
               VBD_Check.Peek_Completed_Primitive (Obj.VBD_Chk);
         begin
            exit Loop_VBD_Check_Completed_Prims when
               not Primitive.Valid (Prim);

            if Primitive.Has_Tag_SB_Check_VBD_Check (Prim) then

               Superblock_Check.
                  Mark_Generated_VBD_Check_Primitive_Complete (
                     Obj.SB_Chk, Prim);

               Obj.Execute_Progress := True;
            else
               raise Program_Error;
            end if;

            VBD_Check.Drop_Completed_Primitive (Obj.VBD_Chk, Prim);

         end Declare_VBD_Check_Completed_Prim;

      end loop Loop_VBD_Check_Completed_Prims;

   end Execute_VBD_Check;

   procedure Execute_Free_Tree_Check (Obj : in out Object_Type)
   is
   begin

      --
      --  Poke state machine of free-tree initialization
      --
      Free_Tree_Check.Execute (Obj.FT_Chk);
      if Free_Tree_Check.Execute_Progress (Obj.FT_Chk) then
         Obj.Execute_Progress := True;
      end if;

      --
      --  Handle primitives generated by free-tree initialization
      --
      Loop_FT_Check_Generated_Prims :
      loop
         Declare_FT_Check_Generated_Prim :
         declare
            Prim : constant Primitive.Object_Type :=
               Free_Tree_Check.Peek_Generated_Primitive (
                  Obj.FT_Chk);
         begin
            exit Loop_FT_Check_Generated_Prims when
               not Primitive.Valid (Prim);

            if Primitive.Has_Tag_FT_Check_Blk_IO (Prim) then

               exit Loop_FT_Check_Generated_Prims when
                  not Block_IO.Primitive_Acceptable (Obj.Blk_IO);

               Block_IO.Submit_Primitive (
                  Obj.Blk_IO, Primitive.Tag_FT_Check_Blk_IO, Prim);

               Obj.Execute_Progress := True;
            else
               raise Program_Error;
            end if;

            Free_Tree_Check.Drop_Generated_Primitive (Obj.FT_Chk, Prim);

         end Declare_FT_Check_Generated_Prim;

      end loop Loop_FT_Check_Generated_Prims;

      --
      --  Handle primitives completed by free-tree initialization
      --
      Loop_FT_Check_Completed_Prims :
      loop
         Declare_FT_Check_Completed_Prim :
         declare
            Prim : constant Primitive.Object_Type :=
               Free_Tree_Check.Peek_Completed_Primitive (Obj.FT_Chk);
         begin
            exit Loop_FT_Check_Completed_Prims when
               not Primitive.Valid (Prim);

            if Primitive.Has_Tag_SB_Check_FT_Check (Prim) then

               Superblock_Check.
                  Mark_Generated_FT_Check_Primitive_Complete (
                     Obj.SB_Chk, Prim,
                     Free_Tree_Check.Peek_Completed_Root (
                        Obj.FT_Chk, Prim));

               Obj.Execute_Progress := True;
            elsif Primitive.Has_Tag_SB_Check_MT_Check (Prim) then

               Superblock_Check.
                  Mark_Generated_FT_Check_Primitive_Complete (
                     Obj.SB_Chk, Prim,
                     Free_Tree_Check.Peek_Completed_Root (
                        Obj.FT_Chk, Prim));

               Obj.Execute_Progress := True;
            else
               raise Program_Error;
            end if;

            Free_Tree_Check.Drop_Completed_Primitive (Obj.FT_Chk, Prim);

         end Declare_FT_Check_Completed_Prim;

      end loop Loop_FT_Check_Completed_Prims;

   end Execute_Free_Tree_Check;

   procedure Execute_Block_IO (
      Obj        : in out Object_Type;
      Blk_IO_Buf :        Block_IO.Data_Type)
   is
   begin
      Loop_Completed_Prims :
      loop
         Declare_Prim :
         declare
            Prim : constant Primitive.Object_Type :=
               Block_IO.Peek_Completed_Primitive (Obj.Blk_IO);
         begin
            exit Loop_Completed_Prims when not Primitive.Valid (Prim);

            if not Primitive.Success (Prim) then
               raise Program_Error;
            end if;

            if Primitive.Has_Tag_SB_Check_Blk_IO (Prim) then

               Superblock_Check.Mark_Generated_Blk_IO_Primitive_Complete (
                  Obj.SB_Chk, Prim,
                  Blk_IO_Buf (
                     Block_IO.Peek_Completed_Data_Index (Obj.Blk_IO)));

            elsif Primitive.Has_Tag_VBD_Check_Blk_IO (Prim) then

               VBD_Check.Mark_Generated_Primitive_Complete (
                  Obj.VBD_Chk, Prim,
                  Blk_IO_Buf (
                     Block_IO.Peek_Completed_Data_Index (Obj.Blk_IO)));

            elsif Primitive.Has_Tag_FT_Check_Blk_IO (Prim) then

               Free_Tree_Check.Mark_Generated_Primitive_Complete (
                  Obj.FT_Chk, Prim,
                  Blk_IO_Buf (
                     Block_IO.Peek_Completed_Data_Index (Obj.Blk_IO)));
            else
               raise Program_Error;
            end if;

            Block_IO.Drop_Completed_Primitive (Obj.Blk_IO, Prim);

         end Declare_Prim;
         Obj.Execute_Progress := True;

      end loop Loop_Completed_Prims;
   end Execute_Block_IO;

   procedure Execute (
      Obj        : in out Object_Type;
      Blk_IO_Buf :        Block_IO.Data_Type)
   is
   begin
      Obj.Execute_Progress := False;
      Execute_Superblock_Check (Obj);
      Execute_VBD_Check (Obj);
      Execute_Free_Tree_Check (Obj);
      Execute_Block_IO (Obj, Blk_IO_Buf);
   end Execute;

   function Execute_Progress (Obj : Object_Type)
   return Boolean
   is (Obj.Execute_Progress);

   procedure Has_IO_Request (
      Obj      :     Object_Type;
      Req      : out Request.Object_Type;
      Data_Idx : out Block_IO.Data_Index_Type)
   is
   begin
      Req      := Request.Invalid_Object;
      Data_Idx := 0;
      declare
         Prim : constant Primitive.Object_Type :=
            Block_IO.Peek_Generated_Primitive (Obj.Blk_IO);
      begin
         if Primitive.Valid (Prim) then
            Data_Idx := Block_IO.Peek_Generated_Data_Index (Obj.Blk_IO, Prim);
            Req := Request.Valid_Object (
               Op => Prim_Op_To_Req_Op (Primitive.Operation (Prim)),
               Succ => False,
               Blk_Nr => Primitive.Block_Number (Prim),
               Off => 0,
               Cnt => 1,
               Tg => 0);
         end if;
      end;
   end Has_IO_Request;

   procedure IO_Request_In_Progress (
      Obj      : in out Object_Type;
      Data_Idx :        Block_IO.Data_Index_Type)
   is
   begin
      Block_IO.Drop_Generated_Primitive_2 (Obj.Blk_IO, Data_Idx);
   end IO_Request_In_Progress;

   procedure IO_Request_Completed (
      Obj        : in out Object_Type;
      Data_Index :        Block_IO.Data_Index_Type;
      Success    :        Boolean)
   is
   begin
      Block_IO.Mark_Generated_Primitive_Complete (
         Obj.Blk_IO, Data_Index, Success);
   end IO_Request_Completed;

end CBE.Check_Library;
